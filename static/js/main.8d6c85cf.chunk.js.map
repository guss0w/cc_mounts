{"version":3,"sources":["App.js","index.js"],"names":["App","useState","table","setTable","orderedMounts","Object","keys","mountlist","useEffect","document","title","get","characterId","a","request","axios","character","characterMounts","reduce","final","instance","data","Character","Avatar","ID","Name","Mounts","idx","mountName","undefined","formatted","Promise","all","charactermap","map","k","characters","getData","className","mount","char","alt","src","length","ReactDOM","render","getElementById"],"mappings":"yQA4FeA,MAnFf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAgBC,OAAOC,KAAKC,GA4ClC,OAzCAC,qBAAU,WACRC,SAASC,MAAQ,kBACjB,IAAMC,EAAG,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,4DACS,mEACbC,EAFI,uCAEsCF,EAFtC,kCACS,oEADT,SAIcG,IAAMJ,IAAIG,GAJxB,OAaV,GATME,EAJI,OAKNC,EAAkBb,EAAcc,QAAO,SAACC,EAAOC,GAAqC,OAAvBD,EAAMC,IAAU,EAAcD,IAAS,IACnGH,GAAcA,EAAUK,MAASL,EAAUK,KAAKC,YACnDN,EAAUK,KAAKC,UAAY,CACzBC,OAAQ,GACRC,GAAI,EACJC,KAAM,KAGLT,GAAcA,EAAUK,MAASL,EAAUK,KAAKK,OAGnD,IAAQC,KAAOX,EAAUK,KAAKK,OACtBE,EAAYZ,EAAUK,KAAKK,OAAOC,GAAKF,UACXI,IAA/BZ,EAAgBW,KACjBX,EAAgBW,IAAa,QALjCZ,EAAUK,KAAKK,OAAS,GAdhB,OAwBJI,EAAY,CAChBP,OAAQP,EAAUK,KAAKC,UAAUC,OACjCE,KAAMT,EAAUK,KAAKC,UAAUG,KAC/BD,GAAIR,EAAUK,KAAKC,UAAUE,GAC7BE,OAAQT,GA5BA,kBA8BHa,GA9BG,4CAAH,sDAFK,4CAkCd,4BAAAjB,EAAA,sEAC2BkB,QAAQC,IAAI3B,OAAOC,KAAK2B,GAAcC,KAAI,SAAAC,GAAC,OAAIxB,EAAIsB,EAAaE,QAD3F,OACQC,EADR,OAEEjC,EAASiC,GAFX,4CAlCc,0DAsCdC,KACC,IAGD,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,mDAEF,8BACE,kCACE,gCACG,+BACA,uBACGlC,EAAc8B,KAAI,SAAAK,GAAK,OACtB,6BACGhC,EAAUgC,IADJA,WAMhB,kCACGrC,EAAMgC,KAAI,SAAAM,GAAI,OACb,+BACE,qBAAIF,UAAU,OAAd,UACE,qBAAKG,IAAKD,EAAKf,KAAMa,UAAU,SAASI,IAAKF,EAAKjB,SAClD,sBAAMe,UAAU,WAAhB,SAA4BE,EAAKf,UAElCrB,EAAc8B,KAAI,SAAAK,GAAK,OACrB,oBAAgBD,UAAU,WAA1B,SAAsCE,EAAKd,OAAOa,GAAS,IAAM,IAAxDA,QANLC,EAAKhB,OAUE,IAAjBtB,EAAMyC,OAAe,6BAAI,8CAA2B,yCC/EjEC,IAASC,OACP,cAAC,EAAD,IACApC,SAASqC,eAAe,U","file":"static/js/main.8d6c85cf.chunk.js","sourcesContent":["// Libraries\nimport {useState, useEffect} from 'react'\nimport axios from 'axios'\n// Style\nimport './App.css'\n// Data\nimport charactermap from './data/character.map.json'\nimport mountlist from './data/mounts.map.json'\n\nfunction App() {\n  const [table, setTable] = useState([])\n  const orderedMounts = Object.keys(mountlist)\n  \n  // Only run our api request on first load\n  useEffect(() => {\n    document.title = 'C&C Mounts List'\n    const get = async (characterId) => {\n      const privateKey = \"cd40cec1f7294f50a2f480e731e6de97daa78b41ccb543159943caefb5698be6\"\n      const request = `https://xivapi.com/character/${characterId}?data=MIMO&private_key=${privateKey}`\n\n      const character = await axios.get(request)\n      let characterMounts = orderedMounts.reduce((final, instance) => {final[instance]=false; return final;}, {})\n      if (!character || !character.data || !character.data.Character) {\n        character.data.Character = {\n          Avatar: '',\n          ID: 0,\n          Name: ''\n        }\n      }\n      if (!character || !character.data || !character.data.Mounts) {\n        character.data.Mounts = []\n      } else {\n        for(let idx in character.data.Mounts) {\n          const mountName = character.data.Mounts[idx].Name\n          if(characterMounts[mountName] !== undefined) {\n            characterMounts[mountName] = true\n          }\n        }\n      }\n\n      const formatted = {\n        Avatar: character.data.Character.Avatar,\n        Name: character.data.Character.Name,\n        ID: character.data.Character.ID,\n        Mounts: characterMounts\n      }\n      return formatted\n    }\n    async function getData() {\n      const characters = await Promise.all(Object.keys(charactermap).map(k => get(charactermap[k])))\n      setTable(characters)\n    }\n    getData()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>C&C Mount Farms</h1>\n      </header>\n      <div>\n        <table>\n          <thead>\n             <tr>\n             <th/>\n               {orderedMounts.map(mount => (\n                 <th key={mount}>\n                   {mountlist[mount]}\n                 </th>\n               ))}\n             </tr>\n          </thead>\n          <tbody>\n            {table.map(char => (\n              <tr key={char.ID}>\n                <td className=\"user\">\n                  <img alt={char.Name} className=\"avatar\" src={char.Avatar}/>\n                  <span className=\"username\">{char.Name}</span>\n                </td>\n                {orderedMounts.map(mount => (\n                   <td key={mount} className=\"mountGot\">{char.Mounts[mount] ? 'x' : ''}</td>\n                ))}\n              </tr>\n            ))}\n            {table.length === 0 ? <tr><td>Loading...</td></tr> : <></>}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}