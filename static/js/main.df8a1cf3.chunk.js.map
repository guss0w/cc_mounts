{"version":3,"sources":["components/Footer.js","App.js","index.js"],"names":["Footer","characters","data","console","log","App","useState","table","setTable","orderedMounts","Object","keys","mountlist","summarizeMountData","userData","useEffect","document","title","get","characterId","a","request","axios","character","characterMounts","reduce","final","instance","Character","Avatar","ID","Name","Mounts","idx","mountName","undefined","formatted","Promise","all","charactermap","map","k","getData","className","mount","char","alt","src","length","ReactDOM","render","getElementById"],"mappings":"yQAgBeA,EAdA,SAAC,GAAY,IACHC,EADRC,EAAU,EAAVA,KACQD,EAGOC,EAF5BC,QAAQC,IAAKH,EAAY,cAI3B,OACE,gCACE,0BCyFSI,MAxFf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAgBC,OAAOC,KAAKC,GAC5BC,EAAqB,SAACC,GAC1BX,QAAQC,IAAIU,IA8Cd,OA1CAC,qBAAU,WACRC,SAASC,MAAQ,kBACjB,IAAMC,EAAG,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,4DACS,mEACbC,EAFI,uCAEsCF,EAFtC,kCACS,oEADT,SAIcG,IAAMJ,IAAIG,GAJxB,OAaV,GATME,EAJI,OAKNC,EAAkBf,EAAcgB,QAAO,SAACC,EAAOC,GAAqC,OAAvBD,EAAMC,IAAU,EAAcD,IAAS,IACnGH,GAAcA,EAAUrB,MAASqB,EAAUrB,KAAK0B,YACnDL,EAAUrB,KAAK0B,UAAY,CACzBC,OAAQ,GACRC,GAAI,EACJC,KAAM,KAGLR,GAAcA,EAAUrB,MAASqB,EAAUrB,KAAK8B,OAGnD,IAAQC,KAAOV,EAAUrB,KAAK8B,OACtBE,EAAYX,EAAUrB,KAAK8B,OAAOC,GAAKF,UACXI,IAA/BX,EAAgBU,KACjBV,EAAgBU,IAAa,QALjCX,EAAUrB,KAAK8B,OAAS,GAdhB,OAwBJI,EAAY,CAChBP,OAAQN,EAAUrB,KAAK0B,UAAUC,OACjCE,KAAMR,EAAUrB,KAAK0B,UAAUG,KAC/BD,GAAIP,EAAUrB,KAAK0B,UAAUE,GAC7BE,OAAQR,GA5BA,kBA8BHY,GA9BG,4CAAH,sDAFK,4CAkCd,4BAAAhB,EAAA,sEAC2BiB,QAAQC,IAAI5B,OAAOC,KAAK4B,GAAcC,KAAI,SAAAC,GAAC,OAAIvB,EAAIqB,EAAaE,QAD3F,OACQxC,EADR,OAEEO,EAASP,GACTY,EAAmBZ,GAHrB,4CAlCc,0DAuCdyC,KACC,CAACjC,EAAeI,IAGjB,sBAAK8B,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,mDAEF,8BACE,kCACE,gCACG,+BACA,uBACGlC,EAAc+B,KAAI,SAAAI,GAAK,OACtB,6BACGhC,EAAUgC,IADJA,WAMhB,kCACGrC,EAAMiC,KAAI,SAAAK,GAAI,OACb,+BACE,qBAAIF,UAAU,OAAd,UACE,qBAAKG,IAAKD,EAAKd,KAAMY,UAAU,SAASI,IAAKF,EAAKhB,SAClD,sBAAMc,UAAU,WAAhB,SAA4BE,EAAKd,UAElCtB,EAAc+B,KAAI,SAAAI,GAAK,OACrB,oBAAgBD,UAAU,WAA1B,SAAsCE,EAAKb,OAAOY,GAAS,IAAM,IAAxDA,QANLC,EAAKf,OAUE,IAAjBvB,EAAMyC,OAAe,6BAAI,8CAA2B,gCAEvD,cAAC,EAAD,CAAQ9C,KAAMK,aCvFxB0C,IAASC,OACP,cAAC,EAAD,IACAlC,SAASmC,eAAe,U","file":"static/js/main.df8a1cf3.chunk.js","sourcesContent":["import {useEffect} from 'react'\n\nconst Footer = ({data}) => {\n  const summarizeData = (characters) => {\n    console.log( characters, 'characters' )\n  }\n  const summary = summarizeData(data)\n  \n  return (\n    <tfoot>\n      <tr>\n      </tr>\n    </tfoot>\n  )\n}\n\nexport default Footer\n","// Libraries\nimport {useState, useEffect} from 'react'\nimport axios from 'axios'\n// Style\nimport './App.css'\n// Data\nimport charactermap from './data/character.map.json'\nimport mountlist from './data/mounts.map.json'\n// Components\nimport Footer from './components/Footer'\n\nfunction App() {\n  const [table, setTable] = useState([])\n  const orderedMounts = Object.keys(mountlist)\n  const summarizeMountData = (userData) => {\n    console.log(userData)\n  }\n\n  // Only run our api request on first load\n  useEffect(() => {\n    document.title = 'C&C Mounts List'\n    const get = async (characterId) => {\n      const privateKey = \"cd40cec1f7294f50a2f480e731e6de97daa78b41ccb543159943caefb5698be6\"\n      const request = `https://xivapi.com/character/${characterId}?data=MIMO&private_key=${privateKey}`\n\n      const character = await axios.get(request)\n      let characterMounts = orderedMounts.reduce((final, instance) => {final[instance]=false; return final;}, {})\n      if (!character || !character.data || !character.data.Character) {\n        character.data.Character = {\n          Avatar: '',\n          ID: 0,\n          Name: ''\n        }\n      }\n      if (!character || !character.data || !character.data.Mounts) {\n        character.data.Mounts = []\n      } else {\n        for(let idx in character.data.Mounts) {\n          const mountName = character.data.Mounts[idx].Name\n          if(characterMounts[mountName] !== undefined) {\n            characterMounts[mountName] = true\n          }\n        }\n      }\n\n      const formatted = {\n        Avatar: character.data.Character.Avatar,\n        Name: character.data.Character.Name,\n        ID: character.data.Character.ID,\n        Mounts: characterMounts\n      }\n      return formatted\n    }\n    async function getData() {\n      const characters = await Promise.all(Object.keys(charactermap).map(k => get(charactermap[k])))\n      setTable(characters)\n      summarizeMountData(characters)\n    }\n    getData()\n  }, [orderedMounts, summarizeMountData])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>C&C Mount Farms</h1>\n      </header>\n      <div>\n        <table>\n          <thead>\n             <tr>\n             <th/>\n               {orderedMounts.map(mount => (\n                 <th key={mount}>\n                   {mountlist[mount]}\n                 </th>\n               ))}\n             </tr>\n          </thead>\n          <tbody>\n            {table.map(char => (\n              <tr key={char.ID}>\n                <td className=\"user\">\n                  <img alt={char.Name} className=\"avatar\" src={char.Avatar}/>\n                  <span className=\"username\">{char.Name}</span>\n                </td>\n                {orderedMounts.map(mount => (\n                   <td key={mount} className=\"mountGot\">{char.Mounts[mount] ? 'x' : ''}</td>\n                ))}\n              </tr>\n            ))}\n            {table.length === 0 ? <tr><td>Loading...</td></tr> : <></>}\n          </tbody>\n          <Footer data={table} />\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}